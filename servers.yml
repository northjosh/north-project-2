Description: Joshua Yaw Mensah || Udacity Project 2-- Deploying High availabillity web app using CloudFormation

Parameters:
  EnvironmentName:
    Description: An environment name that will be prefixed to resource names
    Type: String

Resources:
  # Load Balancer Security Group
  LBSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to our load balancer
      VpcId: !Ref UdacityProjectVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0

  # Security Groups for Instances(Servers)
  ServerSecGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: Allow HTTP to our hosts and SSH from local only
      VpcId: !Ref UdacityProjectVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 80
          ToPort: 80
          CidrIp: 0.0.0.0/0
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 6335
          CidrIp: 0.0.0.0/0

  #Launch Configuration
  WebAppLaunchConfig:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          sudo apt-get update -y
          sudo apt-get install apache2 -y
          sudo systemctl start apache2.service
          cd /var/www/html
          echo "Udacity Demo Web Server Up and Running!" > index.html
      ImageId: ami-005de95e8ff495156
      IamInstanceProfile: !Ref EC2InstanceProfile
      SecurityGroups:
        - !Ref LBSecGroup
        - !Ref ServerSecGroup
      InstanceType: !Ref InstanceType
      BlockDeviceMappings:
        - DeviceName: "/dev/sdk"
          Ebs:
            VolumeSize: "10"

  # AutoScaling Group
  WebAppGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      VPCZoneIdentifier:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PRIV-NETS"
      LaunchConfigurationName:
        Ref: WebAppLaunchConfig
      MinSize: "4"
      DesiredCapacity: "4"
      MaxSize: "8"
      TargetGroupARNs:
        - Ref: WebAppTargetGroup

  # Load Balancer and Listners
  WebAppLB:
    Type: AWS::ElasticLoadBalancingV2::LoadBalancer
    Properties:
      Subnets:
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB1-SN"
        - Fn::ImportValue: !Sub "${EnvironmentName}-PUB2-SN"
      SecurityGroups:
        - !Ref LBSecGroup
  Listener:
    Type: AWS::ElasticLoadBalancingV2::Listener
    Properties:
      DefaultActions:
        - Type: forward
          TargetGroupArn:
            Ref: WebAppTargetGroup
      LoadBalancerArn:
        Ref: WebAppLB
      Port: "80"
      Protocol: HTTP
  ALBListenerRule:
    Type: AWS::ElasticLoadBalancingV2::ListenerRule
    Properties:
      Actions:
        - Type: forward
          TargetGroupArn: !Ref "WebAppTargetGroup"
      Conditions:
        - Field: path-pattern
          Values: [/]
      ListenerArn: !Ref "Listener"
      Priority: 1

  # Load Balancer Target Group
  WebAppTargetGroup:
    Type: AWS::ElasticLoadBalancingV2::TargetGroup
    Properties:
      HealthCheckIntervalSeconds: 10
      HealthCheckPath: /index.html
      HealthCheckProtocol: HTTP
      HealthCheckTimeoutSeconds: 8
      HealthyThresholdCount: 2
      Port: 80
      Protocol: HTTP
      UnhealthyThresholdCount: 5
      VpcId: !Ref UdacityProjectVPC

  # JumpBox Security Group
  JumpBoxSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: "Jumpbox Security Group"
      VpcId: !Ref UdacityProjectVPC
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: 22
          ToPort: 22
          CidrIp: 0.0.0.0/0
      SecurityGroupEgress:
        - IpProtocol: tcp
          FromPort: 0
          ToPort: 6335
          CidrIp: 0.0.0.0/0

  # Jumpboxes
  JumpBox1:
    Type: AWS::EC2::Instance
    Description: "JumpBox for Private Subnet 1"
    Properties:
      ImageId: "ami-005de95e8ff495156"
      InstanceType: "t2.micro"
      KeyName: "Server"
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "JumpBoxSecurityGroup"
          SubnetId:
            Fn:ImportValue: !Sub "${EnvironmentName}-PUB1-SN"

  JumpBox2:
    Type: AWS::EC2::Instance
    Description: "JumpBox for Private Subnet 2"
    Properties:
      ImageId: "ami-005de95e8ff495156"
      InstanceType: "t2.micro"
      KeyName: "Server"
      NetworkInterfaces:
        - AssociatePublicIpAddress: "true"
          DeviceIndex: "0"
          GroupSet:
            - Ref: "JumpBoxSecurityGroup"
          SubnetId:
            Fn:ImportValue: !Sub "${EnvironmentName}-PUB2-SN"

Outputs:
  LoadBalancerDNS:
    Description: The DNS name of the load balancer
    Value: !Join ["http://", [!GetAtt WebAppLB.DNSName]]
    Export:
      Name: !Sub ${EnvironmentName}-LB-DNS
